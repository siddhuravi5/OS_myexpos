alias functionNum R1;
alias pid R2;
alias userPage R3;

//free user area page fn
if(functionNum==2) then 
	userPage=[PROCESS_TABLE+16*pid+11];
	multipush(R1,R2,R3);
	R1=2;
	R2=userPage;
	call MOD_2;
	multipop(R1,R2,R3);
	alias i R4;
	i=0;
	while(i<16) do
		if([[PROCESS_TABLE+pid*16+11]*512 +512 -16+i]==SEMAPHORE) then
				multipush(R1,R2,R3,R4);
				R1=7;
				R3=pid;
				R2=[[PROCESS_TABLE+pid*16+11]*512 +512 -i+1];
				call MOD_0;
				multipop(R1,R2,R3,R4);
				[[PROCESS_TABLE+pid*16+11]*512 +512-16+i]=-1;
		endif;
		i=i+2;
	endwhile;
	i=0;
	while(i<16) do
		if([[PROCESS_TABLE+pid*16+11]*512 +512 -16 +i]==FILE) then
			R1=4;
			R2=[[PROCESS_TABLE+pid*16+11]*512 +512 -16 +i+1];
			call MOD_3; //close file
			[[PROCESS_TABLE+pid*16+11]*512 +512 -16 +i]=-1;
		endif;
		i=i+2;
	endwhile;
	return;
endif;

//exit process fn
if(functionNum==3) then 
	alias i R4;
	if([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]!=9) then
		i=0;
		while(i<16) do
			if([PROCESS_TABLE+i*16+4]==WAIT_PROCESS && [PROCESS_TABLE+i*16+5]==[SYSTEM_STATUS_TABLE+1]) then
				//print "awake";
				[PROCESS_TABLE+i*16+4]=READY;
			endif;
			i=i+1;
		endwhile;
		i=0;
		while(i<16) do
			if([PROCESS_TABLE+i*16+2]==[SYSTEM_STATUS_TABLE+1]) then
				[PROCESS_TABLE+i*16+2]=-1;
			endif;
			i=i+1;
		endwhile;
	endif;	
	
	multipush(R1,R2,R3);
	R1=4;
	R2=pid;
	call MOD_1;
	multipop(R1,R2,R3);
	multipush(R1,R2,R3);
	R1=2;
	R2=pid;
	call MOD_1;
	multipop(R1,R2,R3);
	[PROCESS_TABLE+16*pid+4]=TERMINATED;
	return;
endif;

//free page table fn
if(functionNum==4) then
	alias ptbr R4;
	alias ptlr R5;
	alias i R6;
	ptbr=[PROCESS_TABLE+ pid*16 +14];
	ptlr=[PROCESS_TABLE+ pid*16 +15];
	[ptbr+0]=-1;
	[ptbr+1]="0000";
	[ptbr+2]=-1;
	[ptbr+3]="0000";
	i=4;
	while(i<(2*ptlr)) do
		if([ptbr+i]!=-1) then
			multipush(R1,R2,R3,R4,R5,R6);
			R1=2;
			R2=[ptbr+i];
			//print R2;
			call MOD_2;
			multipop(R1,R2,R3,R4,R5,R6);
			[ptbr+i]=-1;
			[ptbr+i+1]="0000";
		endif;
		i=i+2;
	endwhile;
	i=2;
	while(i<10) do
		if(i==4) then
			i=8;
		endif;
		if([DISK_MAP_TABLE+pid*10+i]!=-1) then
			multipush(R1,R2,R3,R4,R5,R6);
			R1=4;
			R2=[DISK_MAP_TABLE+pid*10+i];
			call MOD_2;
			multipop(R1,R2,R3,R4,R5,R6);
			[DISK_MAP_TABLE+pid*10+i]=-1;
		endif;
		i=i+1;
	endwhile;
	return;
endif;

if(functionNum==1) then
	alias i R4;
	i=0;
	while(i<16) do
		//print "z";
		//print i;
		if([PROCESS_TABLE+i*16+4]==TERMINATED) then
		//	print "xxxx";
			R0=i;
			[PROCESS_TABLE+i*16+1]=R0;
			[PROCESS_TABLE+i*16+14]=PAGE_TABLE_BASE+i*20;
			[PROCESS_TABLE+i*16+15]=10;
			[PROCESS_TABLE+i*16+4]=ALLOCATED;
			return;
		endif;
		i=i+1;
		//print "a";
		//print i;
	endwhile;
	//print "max proc limit";
	R0=-1;
	return;
endif;

//kill all fn
if(functionNum==5) then
	alias i R3;
	i=0;
	//Lock all files to ensure that no processes are in the middle of a file operation
	while(i<MAX_FILE_NUM) do
		if([INODE_TABLE+i*16+1]!=-1) then
			multipush(R1,R2,R3);
	 		R1=4;
	 		R2=i; //inodeIndex
	 		R3=[SYSTEM_STATUS_TABLE+1];
	 		call MOD_0; //acquire inode
	 		multipop(R1,R2,R3);
		endif;
		i=i+1;
	endwhile;
	i=2;
	while(i<MAX_PROC_NUM-1) do
		if(i!=[SYSTEM_STATUS_TABLE+1] && [PROCESS_TABLE+i*16+4]!=TERMINATED) then
			multipush(R1,R2,R3);
			R1=3;
			R2=i;
			call MOD_1; //exit process fn
			multipop(R1,R2,R3);
		endif;
		i=i+1;
	endwhile;
//	i=3;
//	while(i<15) do
//		if(i!=pid && [PROCESS_TABLE+i*16+4]!=TERMINATED) then
//		
//			multipush(R1,R2,R3);
//			R1=3;
//			R2=i;
//			call MOD_1; //exit process fn
//			multipop(R1,R2,R3);
//		endif;
//		i=i+1;
//	endwhile;
	i=0;
	//UnLock all files
	while(i<MAX_FILE_NUM) do
		if([INODE_TABLE+i*16+1]!=-1) then
			multipush(R1,R2,R3);
	 		R1=5;
	 		R2=i; //inodeIndex
	 		R3=[SYSTEM_STATUS_TABLE+1];
	 		call MOD_0; //release inode
	 		multipop(R1,R2,R3);
		endif;
		i=i+1;
	endwhile;
	R0=0;
	//print "finished";
	return;
endif;










