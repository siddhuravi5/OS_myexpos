alias functionNum R1;
alias currentPID R2;
if(functionNum==3) then
	
	//acquire terminal
	multipush(R1,R2,R3);
	R1=8;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	
	print R3;
	
	//release terminal
	multipush(R1,R2,R3);
	R1=9;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	//result is in R0
	return;
	
endif;

if(functionNum==4) then
	
	//acquire terminal
	multipush(R1,R2,R3);
	R1=8;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	
	read;
	
	[PROCESS_TABLE+currentPID*16 + 4] = WAIT_TERMINAL;
	multipush(R1,R2,R3);
	
	call MOD_5; //call scheduler
	
	//print "checkK";
	//now the read is complete so store the result in input buffer of that process
	
	multipop(R1,R2,R3);
	alias phyAddress R4;
	//print R3;
	//print currentPID;
	phyAddress =[ [PROCESS_TABLE+currentPID*16 + 14 ] + 2*(R3/512) ]*512 + R3%512;
	alias wordd R5;
	wordd=[phyAddress];
	
	//[phyAddress]=[PROCESS_TABLE+currentPID*16 + 8];
	//[wordd]=[PROCESS_TABLE+currentPID*16 + 8];
	alias phyword R6;
	phyword=[ [PROCESS_TABLE+currentPID*16 + 14 ] + 2*(wordd/512) ]*512 + wordd%512;
	[phyword]=[PROCESS_TABLE+currentPID*16 + 8];

	return;
	
endif;

//disk load
if(functionNum==2) then
	alias pageNo R3;
	alias blockNo R4;
	multipush(R1,R2,R3,R4);
	//acquire disk function
	R1=3;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE+1]=0; //load
	[DISK_STATUS_TABLE+2]=pageNo;
	[DISK_STATUS_TABLE+3]=blockNo;

	load(pageNo,blockNo);
	//print pageNo;
	//print blockNo;
	[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;

	//multipush(R1,R2,R3,R4);
	call MOD_5;

	//multipop(R1,R2,R3,R4);
	return;
endif;

//Disk Store
if(functionNum==1) then
	//print "disk";
	//print currentPID;
	alias mem R3;
	alias disk R4;
	multipush(R1,R2,R3,R4);
	R1=3;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE+0]=1;
	[DISK_STATUS_TABLE+1]=1; //store bit
	[DISK_STATUS_TABLE+2]=mem;
	[DISK_STATUS_TABLE+3]=disk;
	[DISK_STATUS_TABLE+4]=currentPID;
	store(mem,disk);
	[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
	
	call MOD_5;
	return;
endif;

//helper fn for mod 6
if(functionNum==20) then
	alias i R2;
	alias ptbr R3;
	alias j R4;
				multipush(R2,R3,R4);
				R1=1;
				call MOD_2; //get free page
				multipop(R2,R3,R4);
				[ptbr+2*(i+6)]=R0;
				[ptbr+2*(i+6)+1]="0110";
				multipush(R2,R3,R4);
				R4=[DISK_MAP_TABLE+j*10+i+6];
				R1=2;
				R2=[SYSTEM_STATUS_TABLE+1];
				R3=R0;
				call MOD_4;  //disk load
				multipop(R2,R3,R4);
				multipush(R2,R3,R4);
				R2=[DISK_MAP_TABLE+j*10+i+6];
				R1=4;
				R3=j;
				call MOD_2;  //release block
				multipop(R2,R3,R4);
				[DISK_MAP_TABLE+j*10+i+6]=-1;
	return;
endif;

//helper fn for fork sys call int 8
if(functionNum==21) then
	SP=[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16+13];
	[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*((SP-1)/512)]*512+(SP-1)%512]=-1;
	[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16+9]=0;
	ireturn;
endif;

//helper fn for mod6 stack
if(functionNum==22) then
	alias i R2;
	alias j R5;
	alias ptbr R3;
				multipush(R2,R3,R5);
				R1=6;
				call MOD_2; //get swap block
				multipop(R2,R3,R5);
				[DISK_MAP_TABLE+j*10+8+i-2]=R0;  //disk map table entry
				multipush(R2,R3,R5);
				R3=[ptbr+2*(i+6)];
				R1=1;
				R2=[SYSTEM_STATUS_TABLE+1];
				R4=R0;
				//print R3;
				//print R4;
				call MOD_4;  //disk store
				//print "q1";
				multipop(R2,R3,R5);
				multipush(R2,R3,R5);
				R2=[ptbr+2*(i+6)];
				//print R2;
				R1=2;
				call MOD_2;   //release page
				//print "q2";
				multipop(R2,R3,R5);
				[ptbr+2*(i+6)]=-1;
				[ptbr+2*(i+6)+1]="0000";
	return;
endif;

