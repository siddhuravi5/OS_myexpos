//print "Fork";

[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16+9]=8;
[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16+11]*512-1;

//backup;
R1=1;
call MOD_1;
alias childpid R2;
childpid=R0;
//print R0;
if(childpid==-1) then
	//print "fork not possible";
	//restore;
	
	R1=21; //helper fn
	call MOD_4;
endif;
alias ptbr R1;
ptbr=[PROCESS_TABLE+ [SYSTEM_STATUS_TABLE+1]*16+14];
alias childptbr R4;
//childptbr=[PROCESS_TABLE+childpid*16+14];
childptbr=PAGE_TABLE_BASE+childpid*20;

//allocate heap pages to parent if it doesn't have one
alias v R13;
v=4;
while(v<8) do
	if([ptbr+v]==-1) then
		multipush(R1,R2,R4,R13);
		R1=1;
		call MOD_2;
		multipop(R1,R2,R4,R13);
		[ptbr+v]=R0;
		[ptbr+v+1]="0110";
	endif;
	v=v+2;
endwhile;


//alloc stack
multipush(R1,R2,R4);
R1=1;
call MOD_2;
multipop(R1,R2,R4);
[childptbr+16]=R0;
[childptbr+17]="1110";

alias childstack R10;
childstack=R0;

multipush(R1,R2,R4);
R1=1;
call MOD_2;
multipop(R1,R2,R4);
[childptbr+18]=R0;
[childptbr+19]="1110";

//alloc user area page
multipush(R1,R2,R4);
R1=1;
call MOD_2;
multipop(R1,R2,R4);
[PROCESS_TABLE+ childpid*16 + 11]=R0;
alias i R3;
i=3;
while(i<14) do
	if(i==3||i==6||i==10||i==7 || i==13) then
		[PROCESS_TABLE+ childpid*16 +i]=[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 +i];
	endif;
	i=i+1;
endwhile;
alias z R14;
z=PROCESS_TABLE+ childpid*16;
[z +3]=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+3];
[z +9]=0;
[z +12]=0;
[z +0]=0;
[z +2]=[SYSTEM_STATUS_TABLE+1];
[z +4]=CREATED;


//copy per process resource table

i=1;
while(i<=16) do
	[[PROCESS_TABLE+childpid*16+11]*512 +512 -i]=[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE +1]*16+11]*512 +512 -i];
	if(i%2==0) then
		if([[PROCESS_TABLE+childpid*16+11]*512 +512 -i]==SEMAPHORE) then
			[SEMAPHORE_TABLE+[[PROCESS_TABLE+childpid*16+11]*512 +512 -i+1]+1]=[SEMAPHORE_TABLE+[[PROCESS_TABLE+childpid*16+11]*512 +512 -i+1]+1]+1;
		endif;
		if([[PROCESS_TABLE+childpid*16+11]*512 +512 -i]==FILE) then
			[OPEN_FILE_TABLE+[[PROCESS_TABLE+childpid*16+11]*512 +512 -i+1]*4+1]=[OPEN_FILE_TABLE+[[PROCESS_TABLE+childpid*16+11]*512 +512 -i+1]*4+1]+1;
		endif;
	endif;
	i=i+1;
endwhile;

//copy per process disk map table
i=0;
while(i<10) do
	[DISK_MAP_TABLE+childpid*10+i]=[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE +1]*10+i];
	i=i+1;
endwhile;

//copying page table entries;
i=0;
while(i<16) do
	if(i%2==0) then
		[MEMORY_FREE_LIST+[ptbr+i]]=[MEMORY_FREE_LIST+[ptbr+i]]+1;
	endif;
	[childptbr+i]=[ptbr+i];
	i=i+1;
endwhile;

//copy stack word by word
alias n R7;
n=[ptbr+2*([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]/512)]*512+([PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]%512);
alias j R5;
j=[childptbr+16]*512;
i=[ptbr+16]*512;

while(i<=n) do
	[j]=[i];
	i=i+1;
	j=j+1;
endwhile;
alias t R10;
t=PROCESS_TABLE+childpid*16;
SP=[t+11]*512-1;
SP=SP+1;
[SP]=BP;

alias sp R8;
sp=[t+13];
sp=sp-1;
[ [ [t+14] +2*(sp/512) ]*512 + (sp%512)]=0;
alias cons R9;
cons=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;
sp=[cons+13];
sp=sp-1;

[ [ [cons+14] +2*(sp/512) ]*512 + (sp%512)]=childpid;

//restore;
[cons+9]=0;
SP=[cons+13];
//print "bye fork";
ireturn;










