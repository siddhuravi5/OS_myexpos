alias usersp R1;
usersp=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512-1;
alias syscallno R2;
syscallno=[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*((usersp-5)/512)]*512+(usersp-5)%512];

//semget
if(syscallno==17) then
	alias resindex R2;
	alias j R3;
	j=0;
	while(j<16) do 
		if([[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+512-16+j]==-1) then
			break;
		endif;
		j=j+2;
	endwhile;
	if(j==16) then
		print "full res table";
		[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*((usersp-1)/512)]*512+(usersp-1)%512]=-1;
		SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
		ireturn;
	endif;
	multipush(R1,R2,R3);
	R1=6; //acquire semaphore
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	multipop(R1,R2,R3);
	//print "acq sem";
	//print R0;
	if(R0!=-1) then
		[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+512-16+j]=SEMAPHORE;
		[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+512-16+j+1]=R0;

		[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*((usersp-1)/512)]*512+(usersp-1)%512]=R0;
	else
		[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*((usersp-1)/512)]*512+(usersp-1)%512]=-2;
	endif;

endif;

//semrelease
if(syscallno==18) then
	
	//print "sem rel";
	alias semid R2;
	semid=[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*((usersp-4)/512)]*512+(usersp-4)%512];
	//print semid;
//	if([SEMAPHORE+semid*4+0]==[SYSTEM_STATUS_TABLE+1]) then
		multipush(R1,R2);
		R1=7;
		R2=semid;
		R3=[SYSTEM_STATUS_TABLE+1];
		call MOD_0;
		multipop(R1,R2);
		alias j R3;
		j=0;
		while(j<16) do
			if([[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+512-16+j+1]==semid) then
				[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+512-16+j]=-1;
				break;
			endif;
			j=j+2;
		endwhile;
		//[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512+512-16+semid]=-1;
		[[[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14]+2*((usersp-1)/512)]*512+(usersp-1)%512]=0;
//	endif
endif;

SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
ireturn;
