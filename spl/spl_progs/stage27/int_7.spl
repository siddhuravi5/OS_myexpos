[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 +9]=5;
alias userSP R1;
userSP=SP;

//preprcess

[PROCESS_TABLE+ ( [SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
SP= [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16)+11] * 512 -1;

//code

alias fileDescriptor R2;

fileDescriptor=[[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 1]*16 + 14 ] + 2*((userSP-4)/512) ]*512 + (userSP-4)%512];

if (fileDescriptor == -2) then

	 alias word R3;
	 word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];

	 
	 multipush(R1,R2,R3);
	 R1=3;
	 R2=[SYSTEM_STATUS_TABLE+1];
	 R3=word;

	 call MOD_4;
	 multipop(R1,R2,R3);
	 
	 [[ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 1]*16 + 14 ] + 2*((userSP-4)/512) ]*512 + (userSP-4)%512]=0;

	 
else
	//if(fileDescriptor<0 || fileDescriptor>14) then
	//	alias physicalAddrRetVal R5;
	//	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	//	 [physicalAddrRetVal] = -1;
	//	 print "error";
	// else
	 	//file write
	 	alias word R12;
	 	alias mem R3;
	 	mem=PROCESS_TABLE+[SYSTEM_STATUS_TABLE + 1]*16;
	 	word=[[ [mem + 14 ] + 2*((userSP-3)/512) ]*512 + (userSP-3)%512];
	 	if([[mem+11]*512+512-16+fileDescriptor]!=FILE) then
	 		[[ [mem + 14 ] + 2*((userSP-1)/512) ]*512 + (userSP-1)%512]=-1;
	 	else
	 		alias openIndex R4;
	 		alias inodeIndex R5;
	 		openIndex=[[mem+11]*512+512-16+fileDescriptor+1];
	 		//print "openInd";
	 		//print openIndex;
	 		//print fileDescriptor;
	 		//print [OPEN_FILE_TABLE+0];
	 		inodeIndex=[OPEN_FILE_TABLE+openIndex*4+0];
	 		if([INODE_TABLE+16*inodeIndex+4]==EXCLUSIVE && [INODE_TABLE+16*inodeIndex+3]>1 && [mem+3]!=[INODE_TABLE+16*inodeIndex+3]) then
	 			[[ [mem + 14 ] + 2*((userSP-1)/512) ]*512 + (userSP-1)%512]=-3;
	 			SP=userSP;
				[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
				ireturn;
	 		endif;
	 		
	 		multipush(R1,R2,R3,R4,R5,R12);
	 		R1=4;
	 		R2=inodeIndex;
	 		R3=[SYSTEM_STATUS_TABLE+1];
	 		call MOD_0; //acquire inode
	 		multipop(R1,R2,R3,R4,R5,R12);
	 		if(R0==-1) then
	 			print "file del err";
	 			[[ [mem + 14 ] + 2*((userSP-1)/512) ]*512 + (userSP-1)%512]=-1;
	 			SP=userSP;
				[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
				ireturn;
	 		endif;
	 		
	 		alias lseek R6;
	 		lseek=[OPEN_FILE_TABLE+openIndex*4+2];
	 		if(lseek==MAX_FILE_SIZE) then
	 			multipush(R1,R3);
		 		R1=5;
		 		R2=inodeIndex;
		 		R3=[SYSTEM_STATUS_TABLE+1];
		 		call MOD_0; //release inode
		 		multipop(R1,R3);
		 		//Maximum file size of 2048 reached
	 			[[ [mem + 14 ] + 2*((userSP-1)/512) ]*512 + (userSP-1)%512]=-2; 
	 			SP=userSP;
				[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
				ireturn;
	 		endif;
	 		//print openIndex;
	 		//print [INODE_TABLE+inodeIndex*16+1];
	 		//print lseek;
	 		//print [INODE_TABLE+inodeIndex*16+2];
	 		if(lseek==0 || lseek==512 || lseek==1024 || lseek==1536) then
	 			if(lseek==[INODE_TABLE+inodeIndex*16+2]) then
	 				multipush(R1,R2,R3,R4,R5,R12);
	 				R1=3;
	 				call MOD_2;  // get free block
	 				multipop(R1,R2,R3,R4,R5,R12);
//	 				if(R0==-1) then
//	 					multipush(R1,R3);
//				 		R1=5;
//				 		R2=inodeIndex;
//				 		R3=[SYSTEM_STATUS_TABLE+1];
//				 		call MOD_0; //release inode
//				 		multipop(R1,R3);
//				 		//Maximum file size of 2048 reached
//			 			[[ [mem + 14 ] + 2*((userSP-1)/512) ]*512 + (userSP-1)%512]=-2; 
//			 			SP=userSP;
//						[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
//						ireturn;
//	 				endif;
					//print "block";
	 				//print R0;
	 				[INODE_TABLE+inodeIndex*16+(8+lseek/512)]=R0;
	 			endif;
	 		endif;
	 		
	 		multipush(R1,R2,R3,R4,R5,R12);
	 		R1=1;
	 		R4=word;
	 		R2=[INODE_TABLE+inodeIndex*16+8+lseek/512]; //block number
	 		//print R2;
	 		R3=lseek%512;
	 		call MOD_3; //buffered write
	 		multipop(R1,R2,R3,R4,R5,R12);
	 		if(lseek==[INODE_TABLE+16*inodeIndex+2]) then
	 			[INODE_TABLE+inodeIndex*16+2]=lseek+1;
	 			[ROOT_FILE+inodeIndex*8+1]=lseek+1;	
	 		endif;
	 		lseek=lseek+1;
	 		[OPEN_FILE_TABLE+openIndex*4+2]=lseek;
	 		multipush(R1,R3);
			R1=5;
			R2=inodeIndex;
			R3=[SYSTEM_STATUS_TABLE+1];
			call MOD_0; //release inode
			multipop(R1,R3);
			[[ [mem + 14 ] + 2*((userSP-1)/512) ]*512 + (userSP-1)%512]=0;
	 	endif;
	 //endif;
	 
endif;

SP=userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
