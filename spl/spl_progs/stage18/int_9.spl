print "INT 9";
alias userSP R10;
userSP=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13]=SP;
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=9;
SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+11]*512 -1;
alias fileName R1;
alias temp R2;
temp= userSP-4;
fileName=[ [ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + 2*(temp/512) ]*512 + temp%512 ];

//search inode table(16 words each of 60 entries)
alias i R3;
i=0;
while(i<60) do
	if(fileName==[INODE_TABLE+i*16+1]) then
		if([INODE_TABLE + i*16]==EXEC ) then
			break;
		endif;
	endif;
	i=i+1;
endwhile;
//print i;	
if(i==60) then
	//file not present or not in exec format
	print "file error";
	temp=userSP-1; //result
	[ [ [PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+14] + 2*(temp/512) ]*512 + temp%512 ] = -1;
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+9]=0;
	SP=[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+13];
	ireturn;
endif;

alias index R4;
alias currentPID R5;
currentPID = [SYSTEM_STATUS_TABLE+1];
//print currentPID;
index=[INODE_TABLE + i*16+8]; //inode index
//print index;
multipush(R0,R1,R2,R3,R4,R5);

R1=3; //exit fn number
R2=currentPID; //current pid as arg
call MOD_1;

multipop(R0,R1,R2,R3,R4,R5);
//same user area page is given to the new process
alias userPage R6;

//acquire the same userpage
userPage=[PROCESS_TABLE+ currentPID*16+11];

[MEMORY_FREE_LIST + userPage] =[MEMORY_FREE_LIST + userPage] +1; 
[SYSTEM_STATUS_TABLE+2] = [SYSTEM_STATUS_TABLE+2]-1; //dec mem free count

alias j R11;
while(j<16) do
	[userPage*512 +512 - 16 + j] =-1;
	j=j+2;
endwhile;

SP=userPage*512 -1;
[PROCESS_TABLE+currentPID*16+4] = RUNNING;
[PROCESS_TABLE+currentPID*16+7] = index;

PTBR=PAGE_TABLE_BASE +20*currentPID; 
PTLR=10;

//LIBRARY
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//backup;
multipush(R1,R2,R3,R4,R5,R6,R10);
R1=1;

call MOD_2;
multipop(R1,R2,R3,R4,R5,R6,R10);
//HEAP
[PTBR+4]=R0;
[PTBR+5]="0110";
multipush(R1,R2,R3,R4,R5,R6,R10);
R1=1;

call MOD_2;
multipop(R1,R2,R3,R4,R5,R6,R10);

[PTBR+6]=R0;
[PTBR+7]="0110";


//Stack
multipush(R1,R2,R3,R4,R5,R6,R10);
R1=1;

call MOD_2;
multipop(R1,R2,R3,R4,R5,R6,R10);

[PTBR+16] = R0;

alias spTop R7;
alias codeStart R8;

spTop=R0;
[PTBR+17] = "0110";
multipush(R1,R2,R3,R4,R5,R6,R7,R8,R10);
R1=1;

call MOD_2;
multipop(R1,R2,R3,R4,R5,R6,R7,R8,R10);

[PTBR+18] = R0;
[PTBR+19] = "0110";

//print i;
//code
if([INODE_TABLE+i*16+8]!=-1) then
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	R1=1;
	//print "check2";
	call MOD_2;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	R1=2;
	R2=currentPID;
	R4=[INODE_TABLE+i*16+8]; //block number	
	R3=R0;
	//print R4;
	//print i;
	call MOD_4;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	
	//loadi(R0,[INODE_TABLE+i*16+8]);
	codeStart=R0; 
	[PTBR+8]=R0;
	[PTBR+9]="0100";
endif;

if([INODE_TABLE+i*16+9]!=-1) then
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	R1=1;
	//print "check4";
	call MOD_2;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	multipush(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	R1=2;
	R2=currentPID;
	R4=[INODE_TABLE+i*16+8]; //block number
	R3=R0;
	call MOD_4;
	multipop(R1,R2,R3,R4,R5,R6,R7,R8,R10);
	//loadi(R0,[INODE_TABLE+i*16+9]);
	print "loaded page";
	print [INODE_TABLE+i*16+9];
	print R0;
	[PTBR+10]=R0;
	[PTBR+11]="0100";
endif;

//if([INODE_TABLE+i*16+10]!=-1) then
//	//multipush(R1,R2,R3,R4,R5,R6,R7,R8,R10);
//	R1=1;
//	print "check6";
//	call MOD_2;
//	//multipop(R1,R2,R3,R4,R5,R6,R7,R8,R10);
//	loadi(R0,[INODE_TABLE+i*16+10]);
//	[PTBR+12]=R0;
//	[PTBR+13]="0100";
//endif;

//if([INODE_TABLE+i*16+11]!=-1) then
//	//multipush(R1,R2,R3,R4,R5,R6,R7,R8,R10);
//	R1=1;
//	call MOD_2;
//	//multipop(R1,R2,R3,R4,R5,R6,R7,R8,R10);
//	loadi(R0,[INODE_TABLE+i*16+11]);
//	[PTBR+14]=R0;
//	[PTBR+15]="0100";
//endif;
//print codeStart;
[spTop*512]=[codeStart*512+1];

//print codeStart;
//print spTop;


//restore;

//[PROCESS_TABLE + 16 + 11]=80;
//[PROCESS_TABLE + 16 + 1]=1;
//[PROCESS_TABLE + 16 + 4]=CREATED;
[PROCESS_TABLE + 16*currentPID + 13]=8*512;
//[PROCESS_TABLE + 16*currentPID + 12]=0;
//[PROCESS_TABLE + 16 + 14]=PTBR;
//[PROCESS_TABLE + 16 + 15]=PTLR;

//print currentPID;
//print PTBR;
//print PTLR;



[PROCESS_TABLE+currentPID*16+9]=0;
SP=8*512;
//print "bye int 9";

ireturn;
