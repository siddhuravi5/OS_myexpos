//print "boot";

//load int 12
loadi(26,39);
loadi(27,40);

//load int 16
loadi(34,47);
loadi(35,48);

//load int 17
loadi(36,49);
loadi(37,50);

//load module 3 , file manager
loadi(46,59);
loadi(47,60);

//load int 5
loadi(12,25);
loadi(13,26);

//load root file
loadi(62,5);

//load int 4
loadi(10,23);
loadi(11,24);

//load int 13
loadi(28,41);
loadi(29,42);

//load int 14
loadi(30,43);
loadi(31,44);

//load int 11
loadi(24,37);
loadi(25,38);

//load int 15
loadi(32,45);
loadi(33,46);

//load int 8
loadi(18,31);
loadi(19,32);

//load disk free list
loadi(61,2);

//load disk interrupt
loadi(6,19);
loadi(7,20);

//load int9
loadi(20,33);
loadi(21,34);

//load mod_1
loadi(42,55);
loadi(43,56);

//load mod_2
loadi(44,57);
loadi(45,58);

//load inode_table
loadi(59,3);
loadi(60,4);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);

//load console interrupt
loadi(8,21);
loadi(9,22);

//load INT 6
loadi(14,27);
loadi(15,28);

[TERMINAL_STATUS_TABLE]=0; //terminal is free at begining

loadi(16,29);
loadi(17,30);
loadi(4,17);
loadi(5,18);
loadi(63,13);
loadi(64,14);

//load init
loadi(65,7);

loadi(22,35);
loadi(23,36);

//exception handler
loadi(2,15);
loadi(3,16);

//init pgm -> Login pgm
PTBR=PAGE_TABLE_BASE +20; //as PID of init process is 1
PTLR=10;
//LIBRARY
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//HEAP
[PTBR+4]=-1;   //78
[PTBR+5]="0000";
[PTBR+6]=-1;   //79
[PTBR+7]="0000";

//CODE
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=-1;
[PTBR+11]="0000";
//[PTBR+12] = -1;
//[PTBR+13] = "0000";
//[PTBR+14] = -1;
//[PTBR+15] = "0000";

//Stack
[PTBR+16] = 66;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";
[66*512]=[65*512+1];

//init
[PROCESS_TABLE + 16 + 11]=77;
[PROCESS_TABLE + 16 + 1]=1;
[PROCESS_TABLE + 16 + 4]=CREATED;
[PROCESS_TABLE + 16 + 13]=8*512;
[PROCESS_TABLE + 16 + 12]=0;
[PROCESS_TABLE + 16 + 14]=PTBR;
[PROCESS_TABLE + 16 + 15]=PTLR;
[PROCESS_TABLE + 16 + 3]=1; //user is root

loadi(81,103);
loadi(82,104);
//shell pgm
PTBR=PAGE_TABLE_BASE +40; //as PID of init process is 1
PTLR=10;
//LIBRARY
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//HEAP
[PTBR+4]=-1;   
[PTBR+5]="0000";
[PTBR+6]=-1;   
[PTBR+7]="0000";

//CODE
[PTBR+8]=81;
[PTBR+9]="0100";
[PTBR+10]=82;
[PTBR+11]="0100";
//[PTBR+12] = -1;
//[PTBR+13] = "0000";
//[PTBR+14] = -1;
//[PTBR+15] = "0000";

//Stack
[PTBR+16] = 78;
[PTBR+17] = "0110";
[PTBR+18] = 79;
[PTBR+19] = "0110";
[78*512]=[81*512+1];

//shell pgm
[PROCESS_TABLE + 32 + 11]=80;
[PROCESS_TABLE + 32 + 4]=TERMINATED;
[PROCESS_TABLE + 32 + 13]=8*512;
[PROCESS_TABLE + 32 + 12]=0;
[PROCESS_TABLE + 32 + 14]=PTBR;
[PROCESS_TABLE + 32 + 15]=PTLR;
[PROCESS_TABLE + 32 + 3]=1; //user is root
[PROCESS_TABLE + 32 + 2]=1;
[PROCESS_TABLE + 32 + 1]=2;

[DISK_MAP_TABLE+2*10+4]=103;
[DISK_MAP_TABLE+2*10+5]=104;

alias i R0;
i=0;
while(i<10) do
	[DISK_FREE_LIST+ 10+ i ]=-1;
	i=i+1;
endwhile;

[DISK_FREE_LIST+ 10+ 5 ]=[INODE_TABLE+16+9];
[DISK_FREE_LIST+ 10+ 6 ]=[INODE_TABLE+16+10];
[DISK_FREE_LIST+ 10+ 7 ]=[INODE_TABLE+16+11];


i=3;
while(i<16) do
	[PROCESS_TABLE + 16*i + 4]=TERMINATED;
	i=i+1;
endwhile;

//initialize semaphore table;

i=0;
while(i<4*MAX_SEM_COUNT) do
	[SEMAPHORE_TABLE+4*i]=-1;
	[SEMAPHORE_TABLE+4*i+1]=0;
	i=i+1;
endwhile;

//print "boot over";
i=0;
while(i<80) do
	[MEMORY_FREE_LIST+i]=1;
	i=i+1;
endwhile;
i=80;
while(i<128) do
	[MEMORY_FREE_LIST+i]=0;
	i=i+1;
endwhile;
[MEMORY_FREE_LIST+80]=1;
[MEMORY_FREE_LIST+81]=1;
[MEMORY_FREE_LIST+82]=1;
[DISK_STATUS_TABLE]=0; //initially free



//file status table
i=0;
while(i<MAX_FILE_NUM) do
	[FILE_STATUS_TABLE+i*4+0]=-1;
	[FILE_STATUS_TABLE+i*4+1]=-1;
	i=i+1;
endwhile;

//buffer table
i=0;
while(i<4) do
	[BUFFER_TABLE+i*4+0]=-1;
	[BUFFER_TABLE+i*4+1]=0;
	[BUFFER_TABLE+i*4+2]=-1;
	i=i+1;
endwhile;

//open file table
i=0;
while(i<MAX_OPENFILE_NUM) do
	[OPEN_FILE_TABLE+i*4+0]=-1;
	[OPEN_FILE_TABLE+i*4+1]=0;
	i=i+1;
endwhile;


alias j R11;
//for init pgm, initializing per-process resource table
while(j<16) do
	[[PROCESS_TABLE+11]*512 +512 - 16 + j] =-1;
	j=j+2;
endwhile;

[SYSTEM_STATUS_TABLE+3]=0;
[SYSTEM_STATUS_TABLE+2]=45;


return;
