alias functionNum R1;
alias currentPID R2;
if(functionNum==3) then
	
	//acquire terminal
	multipush(R1,R2,R3);
	R1=8;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	
	print R3;
	
	//release terminal
	multipush(R1,R2,R3);
	R1=9;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	//result is in R0
	return;
	
endif;

if(functionNum==4) then
	
	//acquire terminal
	multipush(R1,R2,R3);
	R1=8;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3);
	
	read;
	
	[PROCESS_TABLE+currentPID*16 + 4] = WAIT_TERMINAL;
	multipush(R1,R2,R3);
	
	call MOD_5; //call scheduler
	
	//print "checkK";
	//now the read is complete so store the result in input buffer of that process
	
	multipop(R1,R2,R3);
	alias phyAddress R4;
	//print R3;
	//print currentPID;
	phyAddress =[ [PROCESS_TABLE+currentPID*16 + 14 ] + 2*(R3/512) ]*512 + R3%512;
	alias wordd R5;
	wordd=[phyAddress];
	
	//[phyAddress]=[PROCESS_TABLE+currentPID*16 + 8];
	//[wordd]=[PROCESS_TABLE+currentPID*16 + 8];
	alias phyword R6;
	phyword=[ [PROCESS_TABLE+currentPID*16 + 14 ] + 2*(wordd/512) ]*512 + wordd%512;
	[phyword]=[PROCESS_TABLE+currentPID*16 + 8];
	//print phyAddress;
	//print phyAddress;
	//print wordd;
	//print phyword;
	//print [phyword];
	
	//print "end check";
	return;
	
endif;

if(functionNum==2) then
	alias pageNo R3;
	alias blockNo R4;
	multipush(R1,R2,R3,R4);
	//acquire disk function
	R1=3;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE+1]=0; //load
	[DISK_STATUS_TABLE+2]=pageNo;
	[DISK_STATUS_TABLE+3]=blockNo;
	//print pageNo;
	//print blockNo;
	load(pageNo,blockNo);
	//print pageNo;
	//print blockNo;
	[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
	//print "wait disk";
	multipush(R1,R2,R3,R4);
	call MOD_5;
	multipop(R1,R2,R3,R4);
	return;
endif;

//Disk Store
if(functionNum==1) then
	alias mem R3;
	alias disk R4;
	multipush(R1,R2,R3,R4);
	R1=3;
	R2=currentPID;
	call MOD_0;
	multipop(R1,R2,R3,R4);
	[DISK_STATUS_TABLE+0]=1;
	[DISK_STATUS_TABLE+1]=1; //store bit
	[DISK_STATUS_TABLE+2]=mem;
	[DISK_STATUS_TABLE+3]=disk;
	[DISK_STATUS_TABLE+4]=currentPID;
	store(mem,disk);
	[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
	call MOD_5;
	return;
endif;







