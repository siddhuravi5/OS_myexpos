alias funcNum R1;

//open
if(funcNum==3) then
	alias fileName R2;
	alias i R3;
	i=0;
	while(i<16) do
		if([INODE_TABLE+i*16+1]==fileName) then
			break;
		endif;
		i=i+1;
	endwhile;
	
	//file not found
	if(i==16) then
		R0=-1;
		return;
	endif;
	multipush(R1,R2,R3);
	R1=4;
	R2=i;
	R3=[SYSTEM_STATUS_TABLE+1];
	call MOD_0; //resource manager , acquire inode
	multipop(R1,R2,R3);
	if(R0==-1) then
		return;
	endif;
	if([INODE_TABLE+i*16+0]==EXEC) then
		R0=-1;
		return;
	endif;
	alias j R4;
	j=0;
	while(j<MAX_OPENFILE_NUM) do
		if([OPEN_FILE_TABLE+j*4+0]==-1) then
			break;
		endif;
		j=j+1;
	endwhile;
	if(j==MAX_OPENFILE_NUM) then
		multipush(R1,R2,R3,R4);
		R1=4;
		R2=i;
		R3=[SYSTEM_STATUS_TABLE+1];
		call MOD_0; //resource manager , release inode
		multipop(R1,R2,R3,R4);
		R0=-2; //reached max num of open files;
		return;
	endif;
	if([INODE_TABLE+i*16+1]=="root") then
		[OPEN_FILE_TABLE+j*4+0]=INODE_ROOT;
	else
		[OPEN_FILE_TABLE+j*4+0]=i;
		if([FILE_STATUS_TABLE+i*4+1]==-1) then
			[FILE_STATUS_TABLE+i*4+1]=1;
		
		else
			[FILE_STATUS_TABLE+i*4+1]=[FILE_STATUS_TABLE+i*4+1]+1;
		endif;
	endif;
	[OPEN_FILE_TABLE+j*4+1]=1;
	[OPEN_FILE_TABLE+j*4+2]=0;
	multipush(R1,R2,R3,R4);
	R1=4;
	R2=i;
	R3=[SYSTEM_STATUS_TABLE+1];
	call MOD_0; //resource manager, release inode
	multipop(R1,R2,R3,R4);
	R0=j; //return open file table index
	return;
	
endif;

//close
if(funcNum==4) then
	alias index R2;
	alias inode R3;
	inode=[OPEN_FILE_TABLE+index*4+0];
	[OPEN_FILE_TABLE+index*4+1]=[OPEN_FILE_TABLE+index*4+1]-1;
	if([OPEN_FILE_TABLE+index*4+1]==0) then
		[OPEN_FILE_TABLE+index*4]=-1;
		[OPEN_FILE_TABLE+index*4+1]=-1;
		[OPEN_FILE_TABLE+index*4+2]=-1;
		if([INODE_TABLE+inode*16+1]!="root") then
			[FILE_STATUS_TABLE+inode*4+1]=[FILE_STATUS_TABLE+inode*4+1]-1;
			if([FILE_STATUS_TABLE+inode*4+1]==0) then
				[FILE_STATUS_TABLE+inode*4+1]=-1;
			endif;
		endif;
	endif;
	R0=0;
	return;
endif;

//buffered read
if(funcNum==2) then
	alias disk R2;
	alias offset R3;
	alias word R4;
	multipush(R1,R2,R3,R4);
	R1=1;
	R2=disk%4;
	R3=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	multipop(R1,R2,R3,R4);
	alias mem R5;
	mem=71+disk%4;
	if([BUFFER_TABLE+4*(disk%4)+0]!=-1) then
		if([BUFFER_TABLE+4*(disk%4)+1]==1) then //dirty bit is set
			multipush(R1,R2,R3,R4,R5);
			R1=1;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=mem;
			R4=[BUFFER_TABLE+4*(disk%4)+0];
			call MOD_4; //disk store
			multipop(R1,R2,R3,R4,R5);
			[BUFFER_TABLE+4*(disk%4)+1]=0;
		endif;
	endif;
	
	multipush(R1,R2,R3,R4,R5);
	R4=disk;
	R1=2;
	R2=[SYSTEM_STATUS_TABLE+1];
	R3=mem;
	call MOD_4; //disk load
	multipop(R1,R2,R3,R4,R5);
	[BUFFER_TABLE+4*(disk%4)+0]=disk;

	[word]=[mem*512+offset];
	//print [word];
	R1=2;
	R2=disk%4;
	R3=[SYSTEM_STATUS_TABLE+1];
	call MOD_0; // release bufeer
	R0=0;
	//print "return";
	return;
endif;






